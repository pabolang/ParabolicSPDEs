ifelse(points >= bound17,
checkRightMark(grades[3],dat[i,result_grade],i),
ifelse(points >= bound2,
checkRightMark(grades[4],dat[i,result_grade],i),
ifelse(points >= bound23,
checkRightMark(grades[5],dat[i,result_grade],i),
ifelse(points >= bound27,
checkRightMark(grades[6],dat[i,result_grade],i),
ifelse(points >= bound3,
checkRightMark(grades[7],dat[i,result_grade],i),
ifelse(points >= bound33,
checkRightMark(grades[8],dat[i,result_grade],i),
ifelse(points >= bound37,
checkRightMark(grades[9],dat[i,result_grade],i),
ifelse(points >= bound4,
checkRightMark(grades[10],dat[i,result_grade],i),
checkRightMark(grades[11],dat[i,result_grade],i)
)))))))))))
}
}
test
dat[17,result_grade] <- 2.7
test <- c()
for (i in 1:to) {
points <- as.numeric(dat[i,result_points])
# Überspringe die nicht Teilnehmer
if(is.na(points)){next}
# Unterscheidung nach Bonus oder nicht
if(!is.na(dat[i,bonus])){
if(dat[i,bewertungsart] == "benotet"){
test <- c(test,ifelse(points >= bound1,
checkRightMark(grades[1],dat[i,result_grade],i),
ifelse(points>= bound13,
checkRightMark(grades[1],dat[i,result_grade],i),
ifelse(points >= bound17,
checkRightMark(grades[2],dat[i,result_grade],i),
ifelse(points >= bound2,
checkRightMark(grades[3],dat[i,result_grade],i),
ifelse(points >= bound23,
checkRightMark(grades[4],dat[i,result_grade],i),
ifelse(points >= bound27,
checkRightMark(grades[5],dat[i,result_grade],i),
ifelse(points >= bound3,
checkRightMark(grades[6],dat[i,result_grade],i),
ifelse(points >= bound33,
checkRightMark(grades[7],dat[i,result_grade],i),
ifelse(points >= bound37,
checkRightMark(grades[8],dat[i,result_grade],i),
ifelse(points >= bound4,
checkRightMark(grades[9],dat[i,result_grade],i),
checkRightMark(grades[11],dat[i,result_grade],i)
)))))))))))
} else {
# hier der Fall dass Bonus und nicht benotet
# nicht ganz klar wie hier die Regelung ist
#setzte nun 4.3 bei 17 Punkten fest und schaue ob jemand bestehen würde
test <- c(test,ifelse(points >= bound1,
checkRightMark(grades[1],dat[i,result_grade],i),
ifelse(points>= bound13,
checkRightMark(grades[1],dat[i,result_grade],i),
ifelse(points >= bound17,
checkRightMark(grades[2],dat[i,result_grade],i),
ifelse(points >= bound2,
checkRightMark(grades[3],dat[i,result_grade],i),
ifelse(points >= bound23,
checkRightMark(grades[4],dat[i,result_grade],i),
ifelse(points >= bound27,
checkRightMark(grades[5],dat[i,result_grade],i),
ifelse(points >= bound3,
checkRightMark(grades[6],dat[i,result_grade],i),
ifelse(points >= bound33,
checkRightMark(grades[7],dat[i,result_grade],i),
ifelse(points >= bound37,
checkRightMark(grades[8],dat[i,result_grade],i),
ifelse(points >= bound4,
checkRightMark(grades[9],dat[i,result_grade],i),
ifelse(points >= bound43,
checkRightMark(grades[10],dat[i,result_grade],i),
checkRightMark(grades[11],dat[i,result_grade],i)
))))))))))))
}
}
else {
test <- c(test,ifelse(points >= bound1,
checkRightMark(grades[1],dat[i,result_grade],i),
ifelse(points>= bound13,
checkRightMark(grades[2],dat[i,result_grade],i),
ifelse(points >= bound17,
checkRightMark(grades[3],dat[i,result_grade],i),
ifelse(points >= bound2,
checkRightMark(grades[4],dat[i,result_grade],i),
ifelse(points >= bound23,
checkRightMark(grades[5],dat[i,result_grade],i),
ifelse(points >= bound27,
checkRightMark(grades[6],dat[i,result_grade],i),
ifelse(points >= bound3,
checkRightMark(grades[7],dat[i,result_grade],i),
ifelse(points >= bound33,
checkRightMark(grades[8],dat[i,result_grade],i),
ifelse(points >= bound37,
checkRightMark(grades[9],dat[i,result_grade],i),
ifelse(points >= bound4,
checkRightMark(grades[10],dat[i,result_grade],i),
checkRightMark(grades[11],dat[i,result_grade],i)
)))))))))))
}
}
test
dat[14,]
dat[14,9]
dat[14,9] <- "ja"
test <- c()
for (i in 1:to) {
points <- as.numeric(dat[i,result_points])
# Überspringe die nicht Teilnehmer
if(is.na(points)){next}
# Unterscheidung nach Bonus oder nicht
if(!is.na(dat[i,bonus])){
if(dat[i,bewertungsart] == "benotet"){
test <- c(test,ifelse(points >= bound1,
checkRightMark(grades[1],dat[i,result_grade],i),
ifelse(points>= bound13,
checkRightMark(grades[1],dat[i,result_grade],i),
ifelse(points >= bound17,
checkRightMark(grades[2],dat[i,result_grade],i),
ifelse(points >= bound2,
checkRightMark(grades[3],dat[i,result_grade],i),
ifelse(points >= bound23,
checkRightMark(grades[4],dat[i,result_grade],i),
ifelse(points >= bound27,
checkRightMark(grades[5],dat[i,result_grade],i),
ifelse(points >= bound3,
checkRightMark(grades[6],dat[i,result_grade],i),
ifelse(points >= bound33,
checkRightMark(grades[7],dat[i,result_grade],i),
ifelse(points >= bound37,
checkRightMark(grades[8],dat[i,result_grade],i),
ifelse(points >= bound4,
checkRightMark(grades[9],dat[i,result_grade],i),
checkRightMark(grades[11],dat[i,result_grade],i)
)))))))))))
} else {
# hier der Fall dass Bonus und nicht benotet
# nicht ganz klar wie hier die Regelung ist
#setzte nun 4.3 bei 17 Punkten fest und schaue ob jemand bestehen würde
test <- c(test,ifelse(points >= bound1,
checkRightMark(grades[1],dat[i,result_grade],i),
ifelse(points>= bound13,
checkRightMark(grades[1],dat[i,result_grade],i),
ifelse(points >= bound17,
checkRightMark(grades[2],dat[i,result_grade],i),
ifelse(points >= bound2,
checkRightMark(grades[3],dat[i,result_grade],i),
ifelse(points >= bound23,
checkRightMark(grades[4],dat[i,result_grade],i),
ifelse(points >= bound27,
checkRightMark(grades[5],dat[i,result_grade],i),
ifelse(points >= bound3,
checkRightMark(grades[6],dat[i,result_grade],i),
ifelse(points >= bound33,
checkRightMark(grades[7],dat[i,result_grade],i),
ifelse(points >= bound37,
checkRightMark(grades[8],dat[i,result_grade],i),
ifelse(points >= bound4,
checkRightMark(grades[9],dat[i,result_grade],i),
ifelse(points >= bound43,
checkRightMark(grades[10],dat[i,result_grade],i),
checkRightMark(grades[11],dat[i,result_grade],i)
))))))))))))
}
}
else {
test <- c(test,ifelse(points >= bound1,
checkRightMark(grades[1],dat[i,result_grade],i),
ifelse(points>= bound13,
checkRightMark(grades[2],dat[i,result_grade],i),
ifelse(points >= bound17,
checkRightMark(grades[3],dat[i,result_grade],i),
ifelse(points >= bound2,
checkRightMark(grades[4],dat[i,result_grade],i),
ifelse(points >= bound23,
checkRightMark(grades[5],dat[i,result_grade],i),
ifelse(points >= bound27,
checkRightMark(grades[6],dat[i,result_grade],i),
ifelse(points >= bound3,
checkRightMark(grades[7],dat[i,result_grade],i),
ifelse(points >= bound33,
checkRightMark(grades[8],dat[i,result_grade],i),
ifelse(points >= bound37,
checkRightMark(grades[9],dat[i,result_grade],i),
ifelse(points >= bound4,
checkRightMark(grades[10],dat[i,result_grade],i),
checkRightMark(grades[11],dat[i,result_grade],i)
)))))))))))
}
}
test
dat <- readxl::read_xlsx("/Users/patrickbosert/desktop/ST1-8001350-84-20212.xlsx")
colnames(dat) <- dat[14,]
dat <- dat[15:82,]
dat$Bewertung <- as.numeric(dat$Bewertung)
to <- dim(dat)[1]
grades <- c(1,1.3,1.7,2,2.3,2.7,3,3.3,3.7,4,5)
# Punktzahl ab der gerade noch die 1.0 erreicht wird
bound1 <- 45
bound13 <- 41.5
bound17 <- 38
bound2 <- 34.5
bound23 <- 31
bound27 <- 27.5
bound3 <- 25.5
bound33 <- 23.5
bound37 <- 21.5
bound4 <- 19
bound43 <- 17
# Spalte für den Bonus
bonus <- which(names(dat) == "Bonus erreicht (ja/nein)")
#Spalte für Bewertung
result_grade <- which(names(dat) == "Bewertung")
# Spalte für Punkte
result_points <- which(names(dat) == "Klausurpunkte")
# Spalte für Bewertungsart
bewertungsart <- which(names(dat) == "Bewertungsart")
checkRightMark <- function(rightMark,tableMark,i){
if(rightMark == tableMark){
return("true")
} else {
str <- paste("Fehler in Datensatz: Stelle ",i,"; Richtige Note: ",rightMark,"; Eingetragen: ",tableMark,sep = "")
return(str)
}
}
test <- c()
for (i in 1:to) {
points <- as.numeric(dat[i,result_points])
# Überspringe die nicht Teilnehmer
if(is.na(points)){next}
# Unterscheidung nach Bonus oder nicht
if(!is.na(dat[i,bonus])){
if(dat[i,bewertungsart] == "benotet"){
test <- c(test,ifelse(points >= bound1,
checkRightMark(grades[1],dat[i,result_grade],i),
ifelse(points>= bound13,
checkRightMark(grades[1],dat[i,result_grade],i),
ifelse(points >= bound17,
checkRightMark(grades[2],dat[i,result_grade],i),
ifelse(points >= bound2,
checkRightMark(grades[3],dat[i,result_grade],i),
ifelse(points >= bound23,
checkRightMark(grades[4],dat[i,result_grade],i),
ifelse(points >= bound27,
checkRightMark(grades[5],dat[i,result_grade],i),
ifelse(points >= bound3,
checkRightMark(grades[6],dat[i,result_grade],i),
ifelse(points >= bound33,
checkRightMark(grades[7],dat[i,result_grade],i),
ifelse(points >= bound37,
checkRightMark(grades[8],dat[i,result_grade],i),
ifelse(points >= bound4,
checkRightMark(grades[9],dat[i,result_grade],i),
checkRightMark(grades[11],dat[i,result_grade],i)
)))))))))))
} else {
# hier der Fall dass Bonus und nicht benotet
# nicht ganz klar wie hier die Regelung ist
#setzte nun 4.3 bei 17 Punkten fest und schaue ob jemand bestehen würde
test <- c(test,ifelse(points >= bound1,
checkRightMark(grades[1],dat[i,result_grade],i),
ifelse(points>= bound13,
checkRightMark(grades[1],dat[i,result_grade],i),
ifelse(points >= bound17,
checkRightMark(grades[2],dat[i,result_grade],i),
ifelse(points >= bound2,
checkRightMark(grades[3],dat[i,result_grade],i),
ifelse(points >= bound23,
checkRightMark(grades[4],dat[i,result_grade],i),
ifelse(points >= bound27,
checkRightMark(grades[5],dat[i,result_grade],i),
ifelse(points >= bound3,
checkRightMark(grades[6],dat[i,result_grade],i),
ifelse(points >= bound33,
checkRightMark(grades[7],dat[i,result_grade],i),
ifelse(points >= bound37,
checkRightMark(grades[8],dat[i,result_grade],i),
ifelse(points >= bound4,
checkRightMark(grades[9],dat[i,result_grade],i),
ifelse(points >= bound43,
checkRightMark(grades[10],dat[i,result_grade],i),
checkRightMark(grades[11],dat[i,result_grade],i)
))))))))))))
}
}
else {
test <- c(test,ifelse(points >= bound1,
checkRightMark(grades[1],dat[i,result_grade],i),
ifelse(points>= bound13,
checkRightMark(grades[2],dat[i,result_grade],i),
ifelse(points >= bound17,
checkRightMark(grades[3],dat[i,result_grade],i),
ifelse(points >= bound2,
checkRightMark(grades[4],dat[i,result_grade],i),
ifelse(points >= bound23,
checkRightMark(grades[5],dat[i,result_grade],i),
ifelse(points >= bound27,
checkRightMark(grades[6],dat[i,result_grade],i),
ifelse(points >= bound3,
checkRightMark(grades[7],dat[i,result_grade],i),
ifelse(points >= bound33,
checkRightMark(grades[8],dat[i,result_grade],i),
ifelse(points >= bound37,
checkRightMark(grades[9],dat[i,result_grade],i),
ifelse(points >= bound4,
checkRightMark(grades[10],dat[i,result_grade],i),
checkRightMark(grades[11],dat[i,result_grade],i)
)))))))))))
}
}
test
length(test)
choose(28,4)/choose(32,8)
choose(28,4)
choose(32,8)
devtools::install_github("cutterkom/generativeart")
library(generativeart)
library(Rcpp)
library(tidyverse)
install.packages(tidyverse)
install.packages("tidyverse")
library(tidyverse)
require("devtools")
install_github('pabolang/ParabolicSPDEs')
library(ParabolicSPDEs)
?simulateSPDEmodel
library(ParabolicSPDEs)
?ParabolicSPDEs
?kappa.test
# Data
theta0 = 0
theta1 = 0
theta2 = 1
sigma = 0.5
numberSpatialPoints = 100
numberTemporalPoints = 10000
spde <- simulateSPDEmodel(theta0,theta1,theta2,sigma,numberSpatialPoints,numberTemporalPoints)
kappa.test(spde,method = "non-oracle",curvature = -1,alternative = "g")
GammaSPDE()
kappa.test
install_github('pabolang/ParabolicSPDEs')
require("devtools")
install_github('pabolang/ParabolicSPDEs')
kappa.test(spde,method = "non-oracle",curvature = -1,alternative = "g")
library(ParabolicSPDEs)
kappa.test(spde,method = "non-oracle",curvature = -1,alternative = "g")
install_github('pabolang/ParabolicSPDEs')
library(ParabolicSPDEs)
install_github('pabolang/ParabolicSPDEs')
require("devtools")
install_github('pabolang/ParabolicSPDEs')
library(ParabolicSPDEs)
require("devtools")
install_github('pabolang/ParabolicSPDEs')
install_github('pabolang/ParabolicSPDEs')
require("devtools")
install_github('pabolang/ParabolicSPDEs')
library(ParabolicSPDEs)
library(ParabolicSPDEs)
?ParabolicSPDEs
kappa_test()
theta0 = 0
theta1 = 0
theta2 = 1
sigma = 0.5
numberSpatialPoints = 100
numberTemporalPoints = 10000
spde <- simulateSPDEmodel(theta0,theta1,theta2,sigma,numberSpatialPoints,numberTemporalPoints)
kappa_test(spde,method = "non-oracle",curvature = -1,alternative = "g")
kappa_test <- function(data, curvature = 0,alternative = "two.sided",conf.level = 0.95,method = "non-oracle",spatialDelta = 0.05, sigma = NA, theta2 = NA, sigma0_squared = NA, theta1 = NA){
dat <- data
N <- dim(dat)[1] - 1
M <- dim(dat)[2] - 1
assumptionsTrue <- sqrt(N) >= M
if(assumptionsTrue){
DNAME <- deparse(substitute(data))
if(alternative == "t"){
alternative = "two.sided"
}
if(alternative == "l"){
alternative = "less"
}
if(alternative == "g"){
alternative = "greater"
}
if(!is.na(theta1) & !is.na(theta2)){
curvature = theta1/theta2
}
if(method == "oracle"){
c1 <- is.na(theta2) || is.na(sigma)
try(if(c1 && is.na(sigma0_squared)) stop("Either provide theta2 and sigma or sigma0_squared!"))
if(is.na(theta2)){
sigma0_squared <- sigma0_squared
} else {
sigma0_squared <- sigma^2/sqrt(theta2)
}
}
Gamma <- GammaSPDE()
y <- seq(0,1,1/M)
yWithoutBounds <- y[which(round(y,4) >= round(spatialDelta,4))[1] : (which( round(y,4) > round((1 - spatialDelta),4))[1]-1 )]
m <- length(yWithoutBounds)
if(method == "non-oracle"){
est1 <- estimateParametersSPDE(data,estimationMethod = "both")
est <- est1[2]
a <- (1-2*spatialDelta)*sum(yWithoutBounds^2)/m
b <- ((1-2*spatialDelta)*mean(yWithoutBounds))^2/(1-2*spatialDelta)
u <- sqrt(N*m)/sqrt(Gamma*pi*(1-2*spatialDelta)/(a-b))
val <- (est-curvature)*u
if(alternative == "two.sided" ){
if(val >= 0){
PVal <- unname(pnorm(-val) + 1-pnorm(val))
} else {
PVal <- unname(pnorm(val)+1-pnorm(-val))
}
} else {
if(alternative == "less" ){
PVal <- pnorm(val)
} else {
if(alternative == "greater" ){
PVal <- 1-pnorm(val)
} else {
print("Invalid alternative!")
}
}
}
alpha <- 1- conf.level
v <- 1/u
q <- pnorm(1-alpha/2)
ci <- c(est-q*v,est+q*v)
attr(ci, "conf.level") <- conf.level
names(est) <- names(curvature) <- "Curvature"
names(val) <- "Lambda"
sigma0_squared <- est1[1]
names(sigma0_squared) <- "normalized volatility estimate"
structure(list(statistic = val,
data.name = DNAME,
conf.int = ci,
parameter = sigma0_squared,
p.value = PVal,
estimate = est,
null.value = curvature,
alternative = alternative,
method = "Asymptotic Kappa Non-Oracle Test"),class = "htest")
} else {
if(method == "oracle"){
est <- estimateParametersSPDE(data,sigma0_squared = sigma0_squared,estimationMethod = "OracleKappa")
u <- sqrt(N*m)/sqrt(Gamma*pi/(sum(yWithoutBounds^2)/m))
val <- (est-curvature)*u
if(alternative == "two.sided" ){
if(val >= 0){
PVal <- unname(pnorm(-val) + 1-pnorm(val))
} else {
PVal <- unname(pnorm(val)+1-pnorm(-val))
}
} else {
if(alternative == "less" ){
PVal <- pnorm(val)
} else {
if(alternative == "greater" ){
PVal <- 1-pnorm(val)
} else {
print("Invalid alternative!")
}
}
}
alpha <- 1- conf.level
v <- 1/u
q <- pnorm(1-alpha/2)
ci <- c(est-q*v,est+q*v)
attr(ci, "conf.level") <- conf.level
names(est) <- names(curvature) <- "Curvature"
names(val) <- "Upsilon"
names(sigma0_squared) <- "normalized volatility"
structure(list(statistic = val,
parameter = sigma0_squared,
data.name = DNAME,
conf.int = ci,
p.value = PVal,
estimate = est,
null.value = curvature,
alternative = alternative,
method = "Asymptotic Kappa Oracle Test"),class = "htest")
} else {
print("No valid method. Check spelling or documentation.")
}
}
} else{
try(if(assumtionsTrue) stop("Assumptions are violated! Make sure N>=M^2"))
print("Estimators by Trabs to be done!")
}
}
rm(list = c("ParabolicSPDEs"))
library("devtools")
#devtools::install_github("klutometis/roxygen")
library(roxygen2)
setwd("/Users/patrickbosert/Desktop/Dissertation/R")
create("ParabolicSPDEs")
setwd("./ParabolicSPDEs")
document()
rm(list = c("kappa_test"))
create("ParabolicSPDEs")
setwd("./ParabolicSPDEs")
document()
setwd("..")
install("ParabolicSPDEs")
install_github('pabolang/ParabolicSPDEs')
