ifelse(points >= bound33,
checkRightMark(grades[8],dat[i,result_grade],i),
ifelse(points >= bound37,
checkRightMark(grades[9],dat[i,result_grade],i),
ifelse(points >= bound4,
checkRightMark(grades[10],dat[i,result_grade],i),
checkRightMark(grades[11],dat[i,result_grade],i)
)))))))))))
}
}
test
i=14
!is.na(dat[i,bonus]))
!is.na(dat[i,bonus]
is.na(dat[i,bonus])
dat2 <- dat
dat2 <- dat
dat[52,result_grade] <- 4
dat$Bewertung <- as.numeric(dat$Bewertung)
dat2 <- dat
dat[52,result_grade] <- 4
dat[21,result_grade] <- 2
test <- c()
for (i in 1:to) {
points <- as.numeric(dat[i,result_points])
# Überspringe die nicht Teilnehmer
if(is.na(points)){next}
# Unterscheidung nach Bonus oder nicht
if(!is.na(dat[i,bonus])){
if(dat[i,bewertungsart] == "benotet"){
test <- c(test,ifelse(points >= bound1,
checkRightMark(grades[1],dat[i,result_grade],i),
ifelse(points>= bound13,
checkRightMark(grades[1],dat[i,result_grade],i),
ifelse(points >= bound17,
checkRightMark(grades[2],dat[i,result_grade],i),
ifelse(points >= bound2,
checkRightMark(grades[3],dat[i,result_grade],i),
ifelse(points >= bound23,
checkRightMark(grades[4],dat[i,result_grade],i),
ifelse(points >= bound27,
checkRightMark(grades[5],dat[i,result_grade],i),
ifelse(points >= bound3,
checkRightMark(grades[6],dat[i,result_grade],i),
ifelse(points >= bound33,
checkRightMark(grades[7],dat[i,result_grade],i),
ifelse(points >= bound37,
checkRightMark(grades[8],dat[i,result_grade],i),
ifelse(points >= bound4,
checkRightMark(grades[9],dat[i,result_grade],i),
checkRightMark(grades[11],dat[i,result_grade],i)
)))))))))))
} else {
# hier der Fall dass Bonus und nicht benotet
# nicht ganz klar wie hier die Regelung ist
#setzte nun 4.3 bei 17 Punkten fest und schaue ob jemand bestehen würde
test <- c(test,ifelse(points >= bound1,
checkRightMark(grades[1],dat[i,result_grade],i),
ifelse(points>= bound13,
checkRightMark(grades[1],dat[i,result_grade],i),
ifelse(points >= bound17,
checkRightMark(grades[2],dat[i,result_grade],i),
ifelse(points >= bound2,
checkRightMark(grades[3],dat[i,result_grade],i),
ifelse(points >= bound23,
checkRightMark(grades[4],dat[i,result_grade],i),
ifelse(points >= bound27,
checkRightMark(grades[5],dat[i,result_grade],i),
ifelse(points >= bound3,
checkRightMark(grades[6],dat[i,result_grade],i),
ifelse(points >= bound33,
checkRightMark(grades[7],dat[i,result_grade],i),
ifelse(points >= bound37,
checkRightMark(grades[8],dat[i,result_grade],i),
ifelse(points >= bound4,
checkRightMark(grades[9],dat[i,result_grade],i),
ifelse(points >= bound43,
checkRightMark(grades[10],dat[i,result_grade],i),
checkRightMark(grades[11],dat[i,result_grade],i)
))))))))))))
}
}
else {
test <- c(test,ifelse(points >= bound1,
checkRightMark(grades[1],dat[i,result_grade],i),
ifelse(points>= bound13,
checkRightMark(grades[2],dat[i,result_grade],i),
ifelse(points >= bound17,
checkRightMark(grades[3],dat[i,result_grade],i),
ifelse(points >= bound2,
checkRightMark(grades[4],dat[i,result_grade],i),
ifelse(points >= bound23,
checkRightMark(grades[5],dat[i,result_grade],i),
ifelse(points >= bound27,
checkRightMark(grades[6],dat[i,result_grade],i),
ifelse(points >= bound3,
checkRightMark(grades[7],dat[i,result_grade],i),
ifelse(points >= bound33,
checkRightMark(grades[8],dat[i,result_grade],i),
ifelse(points >= bound37,
checkRightMark(grades[9],dat[i,result_grade],i),
ifelse(points >= bound4,
checkRightMark(grades[10],dat[i,result_grade],i),
checkRightMark(grades[11],dat[i,result_grade],i)
)))))))))))
}
}
test
dat[17,result_grade] <- 2.7
test <- c()
for (i in 1:to) {
points <- as.numeric(dat[i,result_points])
# Überspringe die nicht Teilnehmer
if(is.na(points)){next}
# Unterscheidung nach Bonus oder nicht
if(!is.na(dat[i,bonus])){
if(dat[i,bewertungsart] == "benotet"){
test <- c(test,ifelse(points >= bound1,
checkRightMark(grades[1],dat[i,result_grade],i),
ifelse(points>= bound13,
checkRightMark(grades[1],dat[i,result_grade],i),
ifelse(points >= bound17,
checkRightMark(grades[2],dat[i,result_grade],i),
ifelse(points >= bound2,
checkRightMark(grades[3],dat[i,result_grade],i),
ifelse(points >= bound23,
checkRightMark(grades[4],dat[i,result_grade],i),
ifelse(points >= bound27,
checkRightMark(grades[5],dat[i,result_grade],i),
ifelse(points >= bound3,
checkRightMark(grades[6],dat[i,result_grade],i),
ifelse(points >= bound33,
checkRightMark(grades[7],dat[i,result_grade],i),
ifelse(points >= bound37,
checkRightMark(grades[8],dat[i,result_grade],i),
ifelse(points >= bound4,
checkRightMark(grades[9],dat[i,result_grade],i),
checkRightMark(grades[11],dat[i,result_grade],i)
)))))))))))
} else {
# hier der Fall dass Bonus und nicht benotet
# nicht ganz klar wie hier die Regelung ist
#setzte nun 4.3 bei 17 Punkten fest und schaue ob jemand bestehen würde
test <- c(test,ifelse(points >= bound1,
checkRightMark(grades[1],dat[i,result_grade],i),
ifelse(points>= bound13,
checkRightMark(grades[1],dat[i,result_grade],i),
ifelse(points >= bound17,
checkRightMark(grades[2],dat[i,result_grade],i),
ifelse(points >= bound2,
checkRightMark(grades[3],dat[i,result_grade],i),
ifelse(points >= bound23,
checkRightMark(grades[4],dat[i,result_grade],i),
ifelse(points >= bound27,
checkRightMark(grades[5],dat[i,result_grade],i),
ifelse(points >= bound3,
checkRightMark(grades[6],dat[i,result_grade],i),
ifelse(points >= bound33,
checkRightMark(grades[7],dat[i,result_grade],i),
ifelse(points >= bound37,
checkRightMark(grades[8],dat[i,result_grade],i),
ifelse(points >= bound4,
checkRightMark(grades[9],dat[i,result_grade],i),
ifelse(points >= bound43,
checkRightMark(grades[10],dat[i,result_grade],i),
checkRightMark(grades[11],dat[i,result_grade],i)
))))))))))))
}
}
else {
test <- c(test,ifelse(points >= bound1,
checkRightMark(grades[1],dat[i,result_grade],i),
ifelse(points>= bound13,
checkRightMark(grades[2],dat[i,result_grade],i),
ifelse(points >= bound17,
checkRightMark(grades[3],dat[i,result_grade],i),
ifelse(points >= bound2,
checkRightMark(grades[4],dat[i,result_grade],i),
ifelse(points >= bound23,
checkRightMark(grades[5],dat[i,result_grade],i),
ifelse(points >= bound27,
checkRightMark(grades[6],dat[i,result_grade],i),
ifelse(points >= bound3,
checkRightMark(grades[7],dat[i,result_grade],i),
ifelse(points >= bound33,
checkRightMark(grades[8],dat[i,result_grade],i),
ifelse(points >= bound37,
checkRightMark(grades[9],dat[i,result_grade],i),
ifelse(points >= bound4,
checkRightMark(grades[10],dat[i,result_grade],i),
checkRightMark(grades[11],dat[i,result_grade],i)
)))))))))))
}
}
test
dat[14,]
dat[14,9]
dat[14,9] <- "ja"
test <- c()
for (i in 1:to) {
points <- as.numeric(dat[i,result_points])
# Überspringe die nicht Teilnehmer
if(is.na(points)){next}
# Unterscheidung nach Bonus oder nicht
if(!is.na(dat[i,bonus])){
if(dat[i,bewertungsart] == "benotet"){
test <- c(test,ifelse(points >= bound1,
checkRightMark(grades[1],dat[i,result_grade],i),
ifelse(points>= bound13,
checkRightMark(grades[1],dat[i,result_grade],i),
ifelse(points >= bound17,
checkRightMark(grades[2],dat[i,result_grade],i),
ifelse(points >= bound2,
checkRightMark(grades[3],dat[i,result_grade],i),
ifelse(points >= bound23,
checkRightMark(grades[4],dat[i,result_grade],i),
ifelse(points >= bound27,
checkRightMark(grades[5],dat[i,result_grade],i),
ifelse(points >= bound3,
checkRightMark(grades[6],dat[i,result_grade],i),
ifelse(points >= bound33,
checkRightMark(grades[7],dat[i,result_grade],i),
ifelse(points >= bound37,
checkRightMark(grades[8],dat[i,result_grade],i),
ifelse(points >= bound4,
checkRightMark(grades[9],dat[i,result_grade],i),
checkRightMark(grades[11],dat[i,result_grade],i)
)))))))))))
} else {
# hier der Fall dass Bonus und nicht benotet
# nicht ganz klar wie hier die Regelung ist
#setzte nun 4.3 bei 17 Punkten fest und schaue ob jemand bestehen würde
test <- c(test,ifelse(points >= bound1,
checkRightMark(grades[1],dat[i,result_grade],i),
ifelse(points>= bound13,
checkRightMark(grades[1],dat[i,result_grade],i),
ifelse(points >= bound17,
checkRightMark(grades[2],dat[i,result_grade],i),
ifelse(points >= bound2,
checkRightMark(grades[3],dat[i,result_grade],i),
ifelse(points >= bound23,
checkRightMark(grades[4],dat[i,result_grade],i),
ifelse(points >= bound27,
checkRightMark(grades[5],dat[i,result_grade],i),
ifelse(points >= bound3,
checkRightMark(grades[6],dat[i,result_grade],i),
ifelse(points >= bound33,
checkRightMark(grades[7],dat[i,result_grade],i),
ifelse(points >= bound37,
checkRightMark(grades[8],dat[i,result_grade],i),
ifelse(points >= bound4,
checkRightMark(grades[9],dat[i,result_grade],i),
ifelse(points >= bound43,
checkRightMark(grades[10],dat[i,result_grade],i),
checkRightMark(grades[11],dat[i,result_grade],i)
))))))))))))
}
}
else {
test <- c(test,ifelse(points >= bound1,
checkRightMark(grades[1],dat[i,result_grade],i),
ifelse(points>= bound13,
checkRightMark(grades[2],dat[i,result_grade],i),
ifelse(points >= bound17,
checkRightMark(grades[3],dat[i,result_grade],i),
ifelse(points >= bound2,
checkRightMark(grades[4],dat[i,result_grade],i),
ifelse(points >= bound23,
checkRightMark(grades[5],dat[i,result_grade],i),
ifelse(points >= bound27,
checkRightMark(grades[6],dat[i,result_grade],i),
ifelse(points >= bound3,
checkRightMark(grades[7],dat[i,result_grade],i),
ifelse(points >= bound33,
checkRightMark(grades[8],dat[i,result_grade],i),
ifelse(points >= bound37,
checkRightMark(grades[9],dat[i,result_grade],i),
ifelse(points >= bound4,
checkRightMark(grades[10],dat[i,result_grade],i),
checkRightMark(grades[11],dat[i,result_grade],i)
)))))))))))
}
}
test
dat <- readxl::read_xlsx("/Users/patrickbosert/desktop/ST1-8001350-84-20212.xlsx")
colnames(dat) <- dat[14,]
dat <- dat[15:82,]
dat$Bewertung <- as.numeric(dat$Bewertung)
to <- dim(dat)[1]
grades <- c(1,1.3,1.7,2,2.3,2.7,3,3.3,3.7,4,5)
# Punktzahl ab der gerade noch die 1.0 erreicht wird
bound1 <- 45
bound13 <- 41.5
bound17 <- 38
bound2 <- 34.5
bound23 <- 31
bound27 <- 27.5
bound3 <- 25.5
bound33 <- 23.5
bound37 <- 21.5
bound4 <- 19
bound43 <- 17
# Spalte für den Bonus
bonus <- which(names(dat) == "Bonus erreicht (ja/nein)")
#Spalte für Bewertung
result_grade <- which(names(dat) == "Bewertung")
# Spalte für Punkte
result_points <- which(names(dat) == "Klausurpunkte")
# Spalte für Bewertungsart
bewertungsart <- which(names(dat) == "Bewertungsart")
checkRightMark <- function(rightMark,tableMark,i){
if(rightMark == tableMark){
return("true")
} else {
str <- paste("Fehler in Datensatz: Stelle ",i,"; Richtige Note: ",rightMark,"; Eingetragen: ",tableMark,sep = "")
return(str)
}
}
test <- c()
for (i in 1:to) {
points <- as.numeric(dat[i,result_points])
# Überspringe die nicht Teilnehmer
if(is.na(points)){next}
# Unterscheidung nach Bonus oder nicht
if(!is.na(dat[i,bonus])){
if(dat[i,bewertungsart] == "benotet"){
test <- c(test,ifelse(points >= bound1,
checkRightMark(grades[1],dat[i,result_grade],i),
ifelse(points>= bound13,
checkRightMark(grades[1],dat[i,result_grade],i),
ifelse(points >= bound17,
checkRightMark(grades[2],dat[i,result_grade],i),
ifelse(points >= bound2,
checkRightMark(grades[3],dat[i,result_grade],i),
ifelse(points >= bound23,
checkRightMark(grades[4],dat[i,result_grade],i),
ifelse(points >= bound27,
checkRightMark(grades[5],dat[i,result_grade],i),
ifelse(points >= bound3,
checkRightMark(grades[6],dat[i,result_grade],i),
ifelse(points >= bound33,
checkRightMark(grades[7],dat[i,result_grade],i),
ifelse(points >= bound37,
checkRightMark(grades[8],dat[i,result_grade],i),
ifelse(points >= bound4,
checkRightMark(grades[9],dat[i,result_grade],i),
checkRightMark(grades[11],dat[i,result_grade],i)
)))))))))))
} else {
# hier der Fall dass Bonus und nicht benotet
# nicht ganz klar wie hier die Regelung ist
#setzte nun 4.3 bei 17 Punkten fest und schaue ob jemand bestehen würde
test <- c(test,ifelse(points >= bound1,
checkRightMark(grades[1],dat[i,result_grade],i),
ifelse(points>= bound13,
checkRightMark(grades[1],dat[i,result_grade],i),
ifelse(points >= bound17,
checkRightMark(grades[2],dat[i,result_grade],i),
ifelse(points >= bound2,
checkRightMark(grades[3],dat[i,result_grade],i),
ifelse(points >= bound23,
checkRightMark(grades[4],dat[i,result_grade],i),
ifelse(points >= bound27,
checkRightMark(grades[5],dat[i,result_grade],i),
ifelse(points >= bound3,
checkRightMark(grades[6],dat[i,result_grade],i),
ifelse(points >= bound33,
checkRightMark(grades[7],dat[i,result_grade],i),
ifelse(points >= bound37,
checkRightMark(grades[8],dat[i,result_grade],i),
ifelse(points >= bound4,
checkRightMark(grades[9],dat[i,result_grade],i),
ifelse(points >= bound43,
checkRightMark(grades[10],dat[i,result_grade],i),
checkRightMark(grades[11],dat[i,result_grade],i)
))))))))))))
}
}
else {
test <- c(test,ifelse(points >= bound1,
checkRightMark(grades[1],dat[i,result_grade],i),
ifelse(points>= bound13,
checkRightMark(grades[2],dat[i,result_grade],i),
ifelse(points >= bound17,
checkRightMark(grades[3],dat[i,result_grade],i),
ifelse(points >= bound2,
checkRightMark(grades[4],dat[i,result_grade],i),
ifelse(points >= bound23,
checkRightMark(grades[5],dat[i,result_grade],i),
ifelse(points >= bound27,
checkRightMark(grades[6],dat[i,result_grade],i),
ifelse(points >= bound3,
checkRightMark(grades[7],dat[i,result_grade],i),
ifelse(points >= bound33,
checkRightMark(grades[8],dat[i,result_grade],i),
ifelse(points >= bound37,
checkRightMark(grades[9],dat[i,result_grade],i),
ifelse(points >= bound4,
checkRightMark(grades[10],dat[i,result_grade],i),
checkRightMark(grades[11],dat[i,result_grade],i)
)))))))))))
}
}
test
length(test)
choose(28,4)/choose(32,8)
choose(28,4)
choose(32,8)
devtools::install_github("cutterkom/generativeart")
library(generativeart)
library(Rcpp)
library(tidyverse)
install.packages(tidyverse)
install.packages("tidyverse")
library(tidyverse)
require("devtools")
install_github('pabolang/ParabolicSPDEs')
library(ParabolicSPDEs)
?simulateSPDEmodel
library(ParabolicSPDEs)
?simulateSPDEmodel
setwd("/Users/patrickbosert/Desktop/Dissertation/R")
create("ParabolicSPDEs")
library("devtools")
#devtools::install_github("klutometis/roxygen")
library(roxygen2)
setwd("/Users/patrickbosert/Desktop/Dissertation/R")
create("ParabolicSPDEs")
setwd("./ParabolicSPDEs")
document()
setwd("..")
install("ParabolicSPDEs")
library(ParabolicSPDEs)
?simulateSPDEmodel
theta0 = 0
theta1 = 1
theta2 = 1
sigma = 0.5
numberSpatialPoints = 10
numberTemporalPoints = 1000
spde <- simulateSPDEmodel(theta0,theta1,theta2,sigma,numberSpatialPoints,numberTemporalPoints)
plotSPDE(spde)
theta0 = 0
theta1 = 1
theta2 = 1
sigma = 0.5
numberSpatialPoints = 100
numberTemporalPoints = 10000
spde <- simulateSPDEmodel(theta0,theta1,theta2,sigma,numberSpatialPoints,numberTemporalPoints)
plotSPDE(spde)
require("devtools")
install_github('pabolang/ParabolicSPDEs')
library(ParabolicSPDEs)
?simulateSPDEmodel
?ParabolicSPDEs
spde_list <- MCSPDESamples(reputations = 100,theta0 = 0,theta1 = 1,theta2 = 1,sigma = 0.5, numberSpatialPoints = 10, numberTemporalPoints = 1000)
est <- estimateParametersSPDE(spde_list,estimationMethod = "OracleKappa", theta2=1,sigma=0.5)
require(ggplot2)
dat <- data.frame(x=est)
ggplot(dat,aes(x=x,fill=1))+
geom_density(alpha=0.4)+
theme_minimal()+
labs(x="")+
theme(legend.position = "none")
spde_list1 <- MCSPDESamples(reputations = 100,theta0 = 0,theta1 = 1,theta2 = 1,sigma = 0.5, numberSpatialPoints = 10, numberTemporalPoints = 1000)
spde_list2 <- MCSPDESamples(reputations = 100,theta0 = 0,theta1 = 2,theta2 = 1,sigma = 1, numberSpatialPoints = 10, numberTemporalPoints = 1000)
est1 <- estimateParametersSPDE(spde_list,estimationMethod = "OracleKappa", theta2=1,sigma=0.5)
est2 <- estimateParametersSPDE(spde_list,estimationMethod = "OracleKappa", theta2=1,sigma=1)
require(ggplot2)
dat <- data.frame(x=c(est1,est2),group=rep(1:2,each=length(est1)))
ggplot(dat,aes(x=x,fill=gruop,group=group,color=group))+
geom_density(alpha=0.4)+
theme_minimal()+
labs(x="")+
theme(legend.position = "none")
ggplot(dat,aes(x=x,fill=group,group=group,color=group))+
geom_density(alpha=0.4)+
theme_minimal()+
labs(x="")+
theme(legend.position = "none")
est1 <- estimateParametersSPDE(spde_list1,estimationMethod = "OracleKappa", theta2=1,sigma=0.5)
est2 <- estimateParametersSPDE(spde_list2,estimationMethod = "OracleKappa", theta2=1,sigma=1)
require(ggplot2)
dat <- data.frame(x=c(est1,est2),group=rep(1:2,each=length(est1)))
ggplot(dat,aes(x=x,fill=group,group=group,color=group))+
geom_density(alpha=0.4)+
theme_minimal()+
labs(x="")+
theme(legend.position = "none")
spde_list2 <- MCSPDESamples(reputations = 100,theta0 = 0,theta1 = 1.1,theta2 = 1,sigma = 1, numberSpatialPoints = 10, numberTemporalPoints = 1000)
est1 <- estimateParametersSPDE(spde_list1,estimationMethod = "OracleKappa", theta2=1,sigma=0.5)
est2 <- estimateParametersSPDE(spde_list2,estimationMethod = "OracleKappa", theta2=1,sigma=1)
require(ggplot2)
dat <- data.frame(x=c(est1,est2),group=rep(1:2,each=length(est1)))
ggplot(dat,aes(x=x,fill=group,group=group,color=group))+
geom_density(alpha=0.4)+
theme_minimal()+
labs(x="")+
theme(legend.position = "none")
est
spde_list
estimateParametersSPDE(spde_list,estimationMethod = "both")
str(estimateParametersSPDE(spde_list,estimationMethod = "both"))
setwd("/Users/patrickbosert/Desktop/Dissertation/R")
setwd("./ParabolicSPDEs")
document()
setwd("./ParabolicSPDEs")
document()
setwd("/Users/patrickbosert/Desktop/Dissertation/R")
setwd("./ParabolicSPDEs")
document()
install_github('pabolang/ParabolicSPDEs')
